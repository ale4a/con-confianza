{
  "address": "0x3B47C253674e2806DCB374d5181ed1e715e68492",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stableCoinAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRepayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "monthlyInstallment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextPaymentDue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidAmount",
          "type": "uint256"
        }
      ],
      "name": "LoanTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addressL",
          "type": "address"
        }
      ],
      "name": "getContractBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRepayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "monthlyInstallment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nextPaymentDue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paidAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ConConfianza.Loan",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInUSDC",
          "type": "uint256"
        }
      ],
      "name": "getInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getLoanDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRepayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "monthlyInstallment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nextPaymentDue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paidAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ConConfianza.Loan",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRepayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "monthlyInstallment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextPaymentDue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paidAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "makePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "takeLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe78854b8ba1004ea4be7c00eb02009a1f31f2eef8f891dd000ec08fde9eabec",
  "receipt": {
    "to": null,
    "from": "0x5fDF2F46959bD37ba72C06aB523CAC3F88291756",
    "contractAddress": "0x3B47C253674e2806DCB374d5181ed1e715e68492",
    "transactionIndex": 0,
    "gasUsed": "947861",
    "logsBloom": "0x
    "blockHash": "0x1b6e09adc80fc181db7d964782ad01c4f6442d72066ab14e2e07d3ceb96e9c16",
    "transactionHash": "0xfe78854b8ba1004ea4be7c00eb02009a1f31f2eef8f891dd000ec08fde9eabec",
    "logs": [],
    "blockNumber": 6131522,
    "cumulativeGasUsed": "947861",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6145974f28645F58767D799E858a4A90724926e4"
  ],
  "numDeployments": 3,
  "solcInputHash": "a9d856e544694583c7bf97e738ae3d8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableCoinAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRepayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"monthlyInstallment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextPaymentDue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"LoanTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressL\",\"type\":\"address\"}],\"name\":\"getContractBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyInstallment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPaymentDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConConfianza.Loan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInUSDC\",\"type\":\"uint256\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getLoanDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyInstallment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPaymentDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConConfianza.Loan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyInstallment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPaymentDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"makePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"takeLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Este contrato permite a los usuarios tomar pr\\u00e9stamos y establecer pagos en cuotas.\",\"kind\":\"dev\",\"methods\":{\"getContractBalance()\":{\"returns\":{\"_0\":\"El saldo de stablecoins del contrato\"}},\"getLoanDetails(address)\":{\"params\":{\"_borrower\":\"La direcci\\u00f3n del prestatario\"},\"returns\":{\"_0\":\"Detalles del pr\\u00e9stamo del prestatario\"}},\"makePayment(uint256)\":{\"params\":{\"_amount\":\"La cantidad a pagar\"}},\"takeLoan(uint256,uint256)\":{\"params\":{\"_amount\":\"La cantidad de stablecoin a pedir prestado\",\"_duration\":\"La duraci\\u00f3n del pr\\u00e9stamo en meses\"}},\"withdrawStablecoin(uint256)\":{\"params\":{\"_amount\":\"La cantidad de stablecoin a retirar\"}}},\"title\":\"InstallmentLoanContract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getContractBalance()\":{\"notice\":\"Obtener el saldo de stablecoins del contrato\"},\"getLoanDetails(address)\":{\"notice\":\"Obtener los detalles del pr\\u00e9stamo de un prestatario\"},\"makePayment(uint256)\":{\"notice\":\"Hacer un pago del pr\\u00e9stamo\"},\"takeLoan(uint256,uint256)\":{\"notice\":\"Tomar un pr\\u00e9stamo de la plataforma\"},\"withdrawStablecoin(uint256)\":{\"notice\":\"Retirar los stablecoins del contrato\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConConfianza.sol\":\"ConConfianza\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/ConConfianza.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title InstallmentLoanContract\\n * @dev Este contrato permite a los usuarios tomar pr\\u00e9stamos y establecer pagos en cuotas.\\n */\\ncontract ConConfianza {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    uint256 constant NUMBER_SLOT = 0;\\n\\n    struct Loan {\\n        uint256 amount;\\n        uint256 interestRate;\\n        uint256 totalRepayment;\\n        uint256 monthlyInstallment;\\n        uint256 duration;\\n        uint256 startTime;\\n        uint256 nextPaymentDue;\\n        uint256 paidAmount;\\n    }\\n\\n    mapping(address => Loan) public loans;\\n    \\n    function getContractBalance(address addressL) external view returns (Loan memory) {\\n        return loans[addressL];\\n    }\\n\\n    address public admin;\\n    IERC20 public stablecoin;\\n\\n    event LoanTaken(address indexed borrower, uint256 amount, uint256 interestRate, uint256 totalRepayment, uint256 monthlyInstallment, uint256 duration, uint256 startTime, uint256 nextPaymentDue, uint256 paidAmount);\\n    event PaymentMade(address indexed borrower, uint256 amount);\\n    \\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Caller is not the admin\\\");\\n        _;\\n    }\\n\\n    constructor(address stableCoinAddress) {\\n        admin = msg.sender;\\n        stablecoin = IERC20(stableCoinAddress); // Own USDC stablecoin\\n    }\\n\\n    function getInterestRate(uint256 amountInUSDC) public pure returns (uint256) {\\n\\t\\t// Check if the amount is between 1 USDC (1,000,000) and 10 USDC (10,000,000)\\n\\t\\trequire(amountInUSDC >= 1000000 && amountInUSDC <= 10000000, \\\"Loan amount must be between 1 USDC and 10 USDC\\\");\\n\\n\\t\\t// Base rate of 20% for all loans in this category\\n\\t\\tuint256 baseRate = 20;\\n\\n\\t\\t// Additional rate based on the loan amount\\n\\t\\t// Smaller loans get higher rates due to higher relative risk\\n\\t\\tuint256 additionalRate;\\n\\t\\tif (amountInUSDC <= 3000000) { // 1 to 3 USDC\\n\\t\\t\\tadditionalRate = 10;\\n\\t\\t} else if (amountInUSDC <= 7000000) { // 3.000001 to 7 USDC\\n\\t\\t\\tadditionalRate = 5;\\n\\t\\t} else { // 7.000001 to 10 USDC\\n\\t\\t\\tadditionalRate = 2;\\n\\t\\t}\\n\\n\\t\\t// Risk factor: increases rate for each USDC below 10 USDC\\n\\t\\tuint256 riskFactor = (10000000 - amountInUSDC) / 1000000 * 5; // 0.5% per USDC below 10 USDC\\n\\n\\t\\tuint256 totalRatePercentage = baseRate + additionalRate + riskFactor;\\n\\n\\t\\t// Return the rate as a percentage with 2 decimal places (e.g., 2750 for 27.50%)\\n\\t\\treturn totalRatePercentage * 100;\\n\\t}\\n\\n    /**\\n     * @notice Tomar un pr\\u00e9stamo de la plataforma\\n     * @param _amount La cantidad de stablecoin a pedir prestado\\n     * @param _duration La duraci\\u00f3n del pr\\u00e9stamo en meses\\n     */\\n    function takeLoan(uint256 _amount, uint256 _duration) external {\\n        uint256 INTEREST_RATE = getInterestRate(_amount);\\n        require(loans[msg.sender].amount == 0, \\\"Existing loan must be repaid first\\\");\\n        require(_amount > 0, \\\"Loan amount must be greater than zero\\\");\\n        require(_duration > 0 && _duration <= 12, \\\"Loan duration must be between 1 and 12 months\\\");\\n\\n        uint256 totalRepayment = _amount + ((_amount * INTEREST_RATE * _duration) / 100);\\n        uint256 monthlyInstallment = totalRepayment / _duration;\\n\\n        loans[msg.sender] = Loan({\\n            amount: _amount,\\n            interestRate: INTEREST_RATE,\\n            totalRepayment: totalRepayment,\\n            monthlyInstallment: monthlyInstallment,\\n            duration: _duration,\\n            startTime: block.timestamp,\\n            nextPaymentDue: block.timestamp + 30 days,\\n            paidAmount: 0\\n        });\\n\\n        stablecoin.transfer(msg.sender, _amount);\\n        emit LoanTaken(msg.sender, _amount, INTEREST_RATE, totalRepayment, monthlyInstallment, _duration, block.timestamp, block.timestamp + 30 days, 0);\\n    }\\n\\n    function approveContract(uint256 _amount) external {\\n        stablecoin.approve(address(this), _amount);\\n    }\\n\\n    /**\\n     * @notice Hacer un pago del pr\\u00e9stamo\\n     * @param _amount La cantidad a pagar\\n     */\\n    function makePayment(uint256 _amount) external {\\n        Loan storage loan = loans[msg.sender];\\n        require(loan.amount > 0, \\\"No active loan found\\\");\\n        require(_amount > 0, \\\"Payment amount must be greater than zero\\\");\\n        require(_amount <= loan.totalRepayment - loan.paidAmount, \\\"Payment exceeds remaining balance\\\");\\n\\n        stablecoin.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        loan.paidAmount += _amount;\\n        loan.nextPaymentDue += 30 days;\\n\\n        if (loan.paidAmount >= loan.totalRepayment) {\\n            delete loans[msg.sender];\\n        }\\n\\n        emit PaymentMade(msg.sender, _amount);\\n    }\\n\\n\\n    /**\\n     * @notice Obtener los detalles del pr\\u00e9stamo de un prestatario\\n     * @param _borrower La direcci\\u00f3n del prestatario\\n     * @return Detalles del pr\\u00e9stamo del prestatario\\n     */\\n    function getLoanDetails(address _borrower) external view returns (Loan memory) {\\n        return loans[_borrower];\\n    }\\n\\n    /**\\n     * @notice Retirar los stablecoins del contrato\\n     * @param _amount La cantidad de stablecoin a retirar\\n     */\\n    function withdrawStablecoin(uint256 _amount) external onlyAdmin {\\n        stablecoin.transfer(admin, _amount);\\n    }\\n\\n    /**\\n     * @notice Obtener el saldo de stablecoins del contrato\\n     * @return El saldo de stablecoins del contrato\\n     */\\n    function getContractBalance() external view returns (uint256) {\\n        return stablecoin.balanceOf(address(this));\\n    }\\n}\\n\\n\",\"keccak256\":\"0xc765cb2f76fc9e85286cbeafca0824e82cd5966080e4c7b5827a0bf875c69b07\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806373b4086b1161007157806373b4086b14610178578063870e974e14610204578063a318312514610217578063e8a7da8e146100d4578063e9cbd8221461022a578063f851a4401461025557600080fd5b80630c196a74146100ae57806343ab265f146100d45780635114cb521461014857806362c35c011461015d5780636f9fb98a14610170575b600080fd5b6100c16100bc366004610d8b565b610268565b6040519081526020015b60405180910390f35b6100e76100e2366004610da4565b61036c565b6040516100cb9190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b61015b610156366004610d8b565b610429565b005b61015b61016b366004610d8b565b610623565b6100c161069d565b6101c9610186366004610da4565b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016100cb565b61015b610212366004610d8b565b61070f565b61015b610225366004610dd4565b6107a4565b60025461023d906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b60015461023d906001600160a01b031681565b6000620f424082101580156102805750629896808211155b6102e85760405162461bcd60e51b815260206004820152602e60248201527f4c6f616e20616d6f756e74206d757374206265206265747765656e203120555360448201526d444320616e64203130205553444360901b60648201526084015b60405180910390fd5b60146000622dc6c084116102fe5750600a610314565b626acfc0841161031057506005610314565b5060025b6000620f42406103278662989680610e0c565b6103319190610e25565b61033c906005610e47565b905060008161034b8486610e5e565b6103559190610e5e565b9050610362816064610e47565b9695505050505050565b6103b460405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506001600160a01b031660009081526020818152604091829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e082015290565b336000908152602081905260409020805461047d5760405162461bcd60e51b8152602060048201526014602482015273139bc81858dd1a5d99481b1bd85b88199bdd5b9960621b60448201526064016102df565b600082116104de5760405162461bcd60e51b815260206004820152602860248201527f5061796d656e7420616d6f756e74206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084016102df565b806007015481600201546104f29190610e0c565b82111561054b5760405162461bcd60e51b815260206004820152602160248201527f5061796d656e7420657863656564732072656d61696e696e672062616c616e636044820152606560f81b60648201526084016102df565b600254610563906001600160a01b0316333085610ac4565b818160070160008282546105779190610e5e565b9250508190555062278d008160060160008282546105959190610e5e565b909155505060028101546007820154106105ea57336000908152602081905260408120818155600181018290556002810182905560038101829055600481018290556005810182905560068101829055600701555b60405182815233907f3a2d0e41c506b136330c6e5e0295ccbf0966daece99bfe7c89020cc01dbfb8d69060200160405180910390a25050565b60025460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b3906044015b6020604051808303816000875af1158015610675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106999190610e71565b5050565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a9190610e93565b905090565b6001546001600160a01b031633146107695760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f74207468652061646d696e00000000000000000060448201526064016102df565b60025460015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401610656565b60006107af83610268565b336000908152602081905260409020549091501561081a5760405162461bcd60e51b815260206004820152602260248201527f4578697374696e67206c6f616e206d75737420626520726570616964206669726044820152611cdd60f21b60648201526084016102df565b600083116108785760405162461bcd60e51b815260206004820152602560248201527f4c6f616e20616d6f756e74206d7573742062652067726561746572207468616e604482015264207a65726f60d81b60648201526084016102df565b6000821180156108895750600c8211155b6108eb5760405162461bcd60e51b815260206004820152602d60248201527f4c6f616e206475726174696f6e206d757374206265206265747765656e20312060448201526c616e64203132206d6f6e74687360981b60648201526084016102df565b60006064836108fa8487610e47565b6109049190610e47565b61090e9190610e25565b6109189085610e5e565b905060006109268483610e25565b90506040518061010001604052808681526020018481526020018381526020018281526020018581526020014281526020014262278d006109679190610e5e565b81526000602091820181905233808252818352604091829020845181559284015160018401558382015160028085019190915560608501516003850155608085015160048086019190915560a0860151600586015560c0860151600686015560e0909501516007909401939093559154905163a9059cbb60e01b815292830191909152602482018790526001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190610e71565b50337fd729c7043c12aaa771548e935b418c3dd0491e2de2bb76057b5a3ac51652c2c0868585858942610a7d8162278d00610e5e565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c0820152600060e08201526101000160405180910390a25050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610b1e908590610b24565b50505050565b6000610b79826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bfb9092919063ffffffff16565b805190915015610bf65780806020019051810190610b979190610e71565b610bf65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102df565b505050565b6060610c0a8484600085610c12565b949350505050565b606082471015610c735760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102df565b600080866001600160a01b03168587604051610c8f9190610ed0565b60006040518083038185875af1925050503d8060008114610ccc576040519150601f19603f3d011682016040523d82523d6000602084013e610cd1565b606091505b5091509150610ce287838387610ced565b979650505050505050565b60608315610d5c578251600003610d55576001600160a01b0385163b610d555760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102df565b5081610c0a565b610c0a8383815115610d715781518083602001fd5b8060405162461bcd60e51b81526004016102df9190610eec565b600060208284031215610d9d57600080fd5b5035919050565b600060208284031215610db657600080fd5b81356001600160a01b0381168114610dcd57600080fd5b9392505050565b60008060408385031215610de757600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e1f57610e1f610df6565b92915050565b600082610e4257634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610e1f57610e1f610df6565b80820180821115610e1f57610e1f610df6565b600060208284031215610e8357600080fd5b81518015158114610dcd57600080fd5b600060208284031215610ea557600080fd5b5051919050565b60005b83811015610ec7578181015183820152602001610eaf565b50506000910152565b60008251610ee2818460208701610eac565b9190910192915050565b6020815260008251806020840152610f0b816040850160208701610eac565b601f01601f1916919091016040019291505056fea2646970667358221220169f65a39a4674b7160aadf1611da8d708165c2f34f3e635c933df14bd886a7864736f6c63430008110033",
  "devdoc": {
    "details": "Este contrato permite a los usuarios tomar préstamos y establecer pagos en cuotas.",
    "kind": "dev",
    "methods": {
      "getContractBalance()": {
        "returns": {
          "_0": "El saldo de stablecoins del contrato"
        }
      },
      "getLoanDetails(address)": {
        "params": {
          "_borrower": "La dirección del prestatario"
        },
        "returns": {
          "_0": "Detalles del préstamo del prestatario"
        }
      },
      "makePayment(uint256)": {
        "params": {
          "_amount": "La cantidad a pagar"
        }
      },
      "takeLoan(uint256,uint256)": {
        "params": {
          "_amount": "La cantidad de stablecoin a pedir prestado",
          "_duration": "La duración del préstamo en meses"
        }
      },
      "withdrawStablecoin(uint256)": {
        "params": {
          "_amount": "La cantidad de stablecoin a retirar"
        }
      }
    },
    "title": "InstallmentLoanContract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getContractBalance()": {
        "notice": "Obtener el saldo de stablecoins del contrato"
      },
      "getLoanDetails(address)": {
        "notice": "Obtener los detalles del préstamo de un prestatario"
      },
      "makePayment(uint256)": {
        "notice": "Hacer un pago del préstamo"
      },
      "takeLoan(uint256,uint256)": {
        "notice": "Tomar un préstamo de la plataforma"
      },
      "withdrawStablecoin(uint256)": {
        "notice": "Retirar los stablecoins del contrato"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 765,
        "contract": "contracts/ConConfianza.sol:ConConfianza",
        "label": "loans",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Loan)760_storage)"
      },
      {
        "astId": 780,
        "contract": "contracts/ConConfianza.sol:ConConfianza",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 783,
        "contract": "contracts/ConConfianza.sol:ConConfianza",
        "label": "stablecoin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)77"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Loan)760_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ConConfianza.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)760_storage"
      },
      "t_struct(Loan)760_storage": {
        "encoding": "inplace",
        "label": "struct ConConfianza.Loan",
        "members": [
          {
            "astId": 745,
            "contract": "contracts/ConConfianza.sol:ConConfianza",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 747,
            "contract": "contracts/ConConfianza.sol:ConConfianza",
            "label": "interestRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 749,
            "contract": "contracts/ConConfianza.sol:ConConfianza",
            "label": "totalRepayment",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 751,
            "contract": "contracts/ConConfianza.sol:ConConfianza",
            "label": "monthlyInstallment",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 753,
            "contract": "contracts/ConConfianza.sol:ConConfianza",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 755,
            "contract": "contracts/ConConfianza.sol:ConConfianza",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 757,
            "contract": "contracts/ConConfianza.sol:ConConfianza",
            "label": "nextPaymentDue",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 759,
            "contract": "contracts/ConConfianza.sol:ConConfianza",
            "label": "paidAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}